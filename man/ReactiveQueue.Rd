% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Queue.R
\name{ReactiveQueue}
\alias{ReactiveQueue}
\title{Reactive extension of \code{Queue} class}
\description{
Implements the queue abstract data type. The last element added to this queue is
the last one to be returned from it.
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:Queue]{teal.slice::Queue}} -> \code{ReactiveQueue}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ReactiveQueue$new()}}
\item \href{#method-get}{\code{ReactiveQueue$get()}}
\item \href{#method-clone}{\code{ReactiveQueue$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="teal.slice" data-topic="Queue" data-id="empty">}\href{../../teal.slice/html/Queue.html#method-empty}{\code{teal.slice::Queue$empty()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal.slice" data-topic="Queue" data-id="pop">}\href{../../teal.slice/html/Queue.html#method-pop}{\code{teal.slice::Queue$pop()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal.slice" data-topic="Queue" data-id="print">}\href{../../teal.slice/html/Queue.html#method-print}{\code{teal.slice::Queue$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal.slice" data-topic="Queue" data-id="push">}\href{../../teal.slice/html/Queue.html#method-push}{\code{teal.slice::Queue$push()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal.slice" data-topic="Queue" data-id="remove">}\href{../../teal.slice/html/Queue.html#method-remove}{\code{teal.slice::Queue$remove()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal.slice" data-topic="Queue" data-id="size">}\href{../../teal.slice/html/Queue.html#method-size}{\code{teal.slice::Queue$size()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializes \code{ReactiveQueue} by setting empty \code{reactiveVal}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReactiveQueue$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Get queue
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReactiveQueue$get(reversed = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reversed}}{(\code{logical(1)})\cr
whether order of elements in the queue should be reversed.
\code{FALSE} by default}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
values stored in the queue
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReactiveQueue$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
